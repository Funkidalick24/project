import"./styles-ae31c95d.js";import{T as e}from"./app-9d647f7c.js";class t{constructor(){this.currentItinerary=null,this.savedItineraries=[],this.travelAPI=new e,this.initializeEventListeners(),this.loadSavedItineraries(),this.addRippleEffectToButtons(),this.initializeBookingListeners(),this.setupAutocomplete()}initializeEventListeners(){document.getElementById("new-itinerary").addEventListener("click",(()=>this.createNewItinerary())),document.getElementById("save-itinerary").addEventListener("click",(()=>this.saveItinerary())),document.getElementById("share-itinerary").addEventListener("click",(()=>this.shareItinerary())),document.getElementById("trip-start").addEventListener("change",(()=>this.updateDays())),document.getElementById("trip-end").addEventListener("change",(()=>this.updateDays()))}initializeBookingListeners(){document.getElementById("search-flights").addEventListener("click",(()=>this.searchFlights())),document.getElementById("search-everywhere").addEventListener("click",(()=>this.searchEverywhereFromCity())),document.getElementById("search-hotels").addEventListener("click",(()=>this.searchHotels()))}createNewItinerary(){this.currentItinerary={name:"",startDate:null,endDate:null,days:[]},document.getElementById("trip-name").value="",document.getElementById("trip-start").value="",document.getElementById("trip-end").value="",document.getElementById("itinerary-days").innerHTML=""}updateDays(){const e=new Date(document.getElementById("trip-start").value),t=new Date(document.getElementById("trip-end").value);if(e&&t&&e<=t){document.getElementById("itinerary-days").innerHTML="";let n=new Date(e);for(;n<=t;)this.addDayToItinerary(n),n.setDate(n.getDate()+1)}}addDayToItinerary(e){const t=document.createElement("div");t.className="itinerary-day",t.innerHTML=`\n            <h3>${e.toLocaleDateString("en-US",{weekday:"long",month:"long",day:"numeric"})}</h3>\n            <div class="activities">\n                <button class="add-activity" data-date="${e.toISOString()}">+ Add Activity</button>\n            </div>\n        `,document.getElementById("itinerary-days").appendChild(t),t.querySelector(".add-activity").addEventListener("click",(e=>{this.addActivity(e.target.dataset.date)}))}addActivity(e){const t=document.createElement("div");t.className="activity",t.innerHTML='\n            <input type="time" class="activity-time">\n            <input type="text" class="activity-description" placeholder="Enter activity description">\n            <button class="remove-activity">×</button>\n        ';const n=document.querySelector(`[data-date="${e}"]`).parentElement;n.insertBefore(t,n.lastElementChild),t.querySelector(".remove-activity").addEventListener("click",(()=>{t.remove()}))}saveItinerary(){const e=document.getElementById("trip-name").value;if(!e)return void alert("Please enter a trip name");const t={name:e,startDate:document.getElementById("trip-start").value,endDate:document.getElementById("trip-end").value,days:this.collectActivities()},n=JSON.parse(localStorage.getItem("itineraries")||"[]");n.push(t),localStorage.setItem("itineraries",JSON.stringify(n)),this.loadSavedItineraries(),alert("Itinerary saved successfully!")}collectActivities(){const e=[];return document.querySelectorAll(".itinerary-day").forEach((t=>{const n=[];t.querySelectorAll(".activity").forEach((e=>{n.push({time:e.querySelector(".activity-time").value,description:e.querySelector(".activity-description").value})})),e.push({date:t.querySelector("h3").textContent,activities:n})})),e}loadSavedItineraries(){const e=JSON.parse(localStorage.getItem("itineraries")||"[]"),t=document.getElementById("itinerary-list");t.innerHTML="",e.forEach((e=>{const n=document.createElement("li");n.textContent=e.name,n.addEventListener("click",(()=>this.loadItinerary(e))),t.appendChild(n)}))}loadItinerary(e){document.getElementById("trip-name").value=e.name,document.getElementById("trip-start").value=e.startDate,document.getElementById("trip-end").value=e.endDate,this.updateDays()}shareItinerary(){alert("Sharing functionality coming soon!")}addRippleEffectToButtons(){document.querySelectorAll(".primary-button, .secondary-button, .add-activity").forEach((e=>{e.addEventListener("click",this.addRippleEffect)}))}addRippleEffect(e){const t=e.currentTarget,n=t.getElementsByClassName("ripple");for(;n.length>0;)n[0].remove();const i=document.createElement("span");i.classList.add("ripple"),t.appendChild(i);const a=t.getBoundingClientRect(),s=Math.max(a.width,a.height);i.style.width=i.style.height=s+"px",i.style.left=e.clientX-a.left-s/2+"px",i.style.top=e.clientY-a.top-s/2+"px",i.addEventListener("animationend",(()=>{i.remove()}))}setupAutocomplete(){const e=document.getElementById("flight-from"),t=document.getElementById("flight-to");this.setupCityAutocomplete(e,"from"),this.setupCityAutocomplete(t,"to")}setupCityAutocomplete(e,t){let n;const i=document.getElementById(`${t}-suggestions`),a=document.getElementById(`flight-${t}-code`);if(!e.parentElement.classList.contains("location-input-container")){const t=document.createElement("div");t.className="location-input-container",e.parentNode.insertBefore(t,e),t.appendChild(e)}e.addEventListener("input",(()=>{clearTimeout(n),i.classList.remove("active");const t=e.value.trim();t.length<2||(n=setTimeout((async()=>{try{const n=await this.travelAPI.getCitySuggestions(t,{category:"geos",language:"en"});if(!n||0===n.length)return i.innerHTML='<div class="no-results">No locations found</div>',void i.classList.add("active");i.innerHTML=n.map((e=>`\n                        <div class="suggestion-item" data-id="${e.id}">\n                            <div class="suggestion-main">\n                                <div class="suggestion-name">\n                                    ${e.name}\n                                    ${e.code?`<span class="airport-code">(${e.code})</span>`:""}\n                                </div>\n                                <div class="suggestion-details">\n                                    ${"airport"===e.type?"✈️ Airport in ":""}\n                                    ${e.address.city?`<span>${e.address.city}</span>`:""}\n                                    ${e.address.state?`<span>${e.address.state}</span>`:""}\n                                    ${e.address.country?`<span>${e.address.country}</span>`:""}\n                                </div>\n                            </div>\n                        </div>\n                    `)).join(""),i.classList.add("active"),i.querySelectorAll(".suggestion-item").forEach((t=>{t.addEventListener("click",(()=>{const s=n.find((e=>e.id===t.dataset.id));e.value=this.formatLocationName(s),a.value=s.id,i.classList.remove("active")}))}))}catch(n){i.innerHTML='<div class="error">Error fetching locations</div>',i.classList.add("active")}}),300))})),document.addEventListener("click",(t=>{e.contains(t.target)||i.contains(t.target)||i.classList.remove("active")}))}formatLocationName(e){const t=[];return t.push(e.name),e.address.city&&e.name!==e.address.city&&t.push(e.address.city),e.address.state&&t.push(e.address.state),e.address.country&&t.push(e.address.country),t.join(", ")}async searchFlights(){const e=document.getElementById("flight-from-code").value,t=document.getElementById("flight-to-code").value,n=document.getElementById("trip-start").value;if(!e||3!==e.length)return void alert("Please select a valid departure airport");if(!t||3!==t.length)return void alert("Please select a valid arrival airport");if(!n||new Date(n)<new Date)return void alert("Please select a valid future date");const i=document.getElementById("flight-results");i.innerHTML='<div class="loading">Searching for flights...</div>';try{const i=await this.travelAPI.searchFlights(e,t,n);this.displayFlightResults(i.data)}catch(a){i.innerHTML=`\n                <div class="error">\n                    <h3>No Flights Found</h3>\n                    <p>${a.message||"No flights available for this route and date."}</p>\n                    <p>Try:</p>\n                    <ul>\n                        <li>Different dates</li>\n                        <li>Nearby airports</li>\n                        <li>Different route combinations</li>\n                    </ul>\n                </div>`}}displayFlightResults(e){const t=document.getElementById("flight-results");t.innerHTML="",e&&0!==e.length?e.forEach((e=>{const n=new Date(e.itineraries[0].segments[0].departure.at),i=new Date(e.itineraries[0].segments[0].arrival.at),a=document.createElement("div");a.className="result-card",a.innerHTML=`\n                <h4>${e.itineraries[0].segments[0].departure.iataCode} → \n                    ${e.itineraries[0].segments[0].arrival.iataCode}</h4>\n                <p class="carrier">${e.carrier}</p>\n                <p>Departure: ${n.toLocaleTimeString()}</p>\n                <p>Arrival: ${i.toLocaleTimeString()}</p>\n                <p class="price">$${e.price.total}</p>\n                <button class="book-button" data-flight-id="${e.id}">Book Flight</button>\n            `,t.appendChild(a)})):t.innerHTML='<div class="error">No flights found for this route and date.</div>'}async searchHotels(){const e=document.getElementById("hotel-city").value,t=document.getElementById("hotel-rating").value;if(!e)return void alert("Please enter a city");const n=document.getElementById("hotel-results");n.innerHTML='<div class="loading">Searching for hotels...</div>';try{const n=await this.travelAPI.searchHotels(e,t);this.displayHotelResults(n.data)}catch(i){n.innerHTML='<div class="error">Error searching hotels. Please try again.</div>'}}async displayHotelResults(e){const t=document.getElementById("hotel-results");t.innerHTML="",e&&0!==e.length?e.forEach((e=>{const n=document.createElement("div");n.className="result-card hotel-card",n.innerHTML=`\n                <h4>${e.name}</h4>\n                <div class="hotel-rating">\n                    <span class="stars">${"★".repeat(Math.floor(e.rating))}</span>\n                    <span class="review-count">(${e.reviews.count} reviews)</span>\n                </div>\n                <p class="address">${e.address}</p>\n                <div class="hotel-images">\n                    ${e.images.slice(0,3).map((t=>`<img src="${t}" alt="${e.name}">`)).join("")}\n                </div>\n                <p class="price">${e.price.currency} ${e.price.amount} per night</p>\n                <div class="hotel-actions">\n                    <button class="book-button" data-hotel-id="${e.id}">Book Now</button>\n                    <button class="review-button" data-hotel-id="${e.id}">See Reviews</button>\n                </div>\n                <div class="reviews-container" id="reviews-${e.id}"></div>\n            `;n.querySelector(".review-button").addEventListener("click",(()=>this.toggleHotelReviews(e.id))),n.querySelector(".book-button").addEventListener("click",(()=>{this.showLocationDetails(e.id)})),t.appendChild(n)})):t.innerHTML='<div class="error">No hotels found for this location.</div>'}async toggleHotelReviews(e){const t=document.getElementById(`reviews-${e}`);if(!t.classList.contains("active")){t.innerHTML='<div class="loading">Loading reviews...</div>',t.classList.add("active");try{const n=await this.travelAPI.getLocationReviews(e);this.displayHotelReviews(n,t)}catch(n){t.innerHTML='<div class="error">Failed to load reviews.</div>'}}else t.classList.remove("active"),t.innerHTML=""}displayHotelReviews(e,t){e&&0!==e.length?(t.innerHTML=`\n            <div class="reviews-list">\n                ${e.map((e=>`\n                    <div class="review-item">\n                        <div class="review-header">\n                            <div class="review-meta">\n                                <span class="review-stars">${"★".repeat(e.rating)}</span>\n                                <span class="review-title">${e.title}</span>\n                                <span class="review-date">\n                                    Traveled ${e.tripType||""} - ${new Date(e.travelDate).toLocaleDateString()}\n                                </span>\n                            </div>\n                            <div class="reviewer-info">\n                                <span class="reviewer-name">${e.user.username}</span>\n                                ${e.user.userLocation?`<span class="reviewer-location">${e.user.userLocation}</span>`:""}\n                                <span class="reviewer-contributions">\n                                    ${e.user.contributions} contributions\n                                </span>\n                            </div>\n                        </div>\n\n                        <p class="review-text">${e.text}</p>\n                        \n                        ${e.photos.length>0?`\n                            <div class="review-photos">\n                                ${e.photos.map((e=>`\n                                    <img src="${e.url}" alt="${e.caption||"Review photo"}" \n                                         title="${e.caption||""}"\n                                `)).join("")}\n                            </div>\n                        `:""}\n\n                        ${e.roomTip?`\n                            <div class="room-tip">\n                                <strong>Room Tip:</strong> ${e.roomTip}\n                            </div>\n                        `:""}\n\n                        <div class="review-footer">\n                            <span class="review-date">\n                                Reviewed: ${new Date(e.publishedDate).toLocaleDateString()}\n                            </span>\n                            <span class="helpful-votes">👍 ${e.helpful.votes}</span>\n                            <span class="thanked">❤️ ${e.helpful.thanked}</span>\n                        </div>\n\n                        ${e.managementResponse?`\n                            <div class="management-response">\n                                <div class="response-header">\n                                    <strong>Response from management:</strong>\n                                    <span class="response-date">\n                                        ${new Date(e.managementResponse.date).toLocaleDateString()}\n                                    </span>\n                                </div>\n                                <p>${e.managementResponse.text}</p>\n                            </div>\n                        `:""}\n                    </div>\n                `)).join("")}\n            </div>\n            <button class="write-review-button">Write a Review</button>\n        `,t.querySelector(".write-review-button").addEventListener("click",(()=>this.showReviewForm(t.closest(".hotel-card").querySelector(".book-button").dataset.hotelId)))):t.innerHTML='<div class="no-reviews">No reviews yet.</div>'}showReviewForm(e){const t=document.createElement("div");t.className="review-modal",t.innerHTML=`\n            <div class="review-form">\n                <h3>Write a Review</h3>\n                <div class="rating-input">\n                    <label>Rating:</label>\n                    <div class="stars-input">\n                        ${[1,2,3,4,5].map((e=>`<span class="star" data-rating="${e}">★</span>`)).join("")}\n                    </div>\n                </div>\n                <input type="text" placeholder="Review Title" id="review-title">\n                <textarea placeholder="Your Review" id="review-text"></textarea>\n                <input type="text" placeholder="Your Name" id="review-name">\n                <div class="form-actions">\n                    <button class="submit-review">Submit</button>\n                    <button class="cancel-review">Cancel</button>\n                </div>\n            </div>\n        `,document.body.appendChild(t),t.querySelector(".cancel-review").addEventListener("click",(()=>t.remove()));let n=0;const i=t.querySelectorAll(".star");i.forEach((e=>{e.addEventListener("click",(e=>{n=parseInt(e.target.dataset.rating),i.forEach((e=>e.classList.toggle("selected",parseInt(e.dataset.rating)<=n)))}))})),t.querySelector(".submit-review").addEventListener("click",(async()=>{const i={rating:n,title:t.querySelector("#review-title").value,text:t.querySelector("#review-text").value,userNickname:t.querySelector("#review-name").value};try{await this.travelAPI.submitReview(e,i),t.remove(),this.toggleHotelReviews(e)}catch(a){alert("Failed to submit review. Please try again.")}}))}async searchEverywhereFromCity(){const e=document.getElementById("flight-from-code").value,t=document.getElementById("trip-start").value;if(!e||!t)return void alert("Please select a departure city and date");const n=document.getElementById("flight-results");n.innerHTML='<div class="loading">Searching for destinations...</div>';try{const[n,i]=t.split("-"),a=await this.travelAPI.searchEverywhereFromCity(e,parseInt(i),parseInt(n));this.displayEverywhereResults(a)}catch(i){n.innerHTML=`\n                <div class="error">\n                    <h3>No Destinations Found</h3>\n                    <p>${i.message||"Unable to find destinations from this city."}</p>\n                    <p>Try:</p>\n                    <ul>\n                        <li>Different departure dates</li>\n                        <li>A different departure city</li>\n                        <li>Checking back later for updated prices</li>\n                    </ul>\n                </div>`}}displayEverywhereResults(e){const t=document.getElementById("flight-results");t.innerHTML="",e&&0!==e.length?e.forEach((e=>{const n=document.createElement("div");n.className="result-card",n.innerHTML=`\n                <h4>${e.destination.city}, ${e.destination.country}</h4>\n                <p class="carrier">${e.airlines.join(", ")}</p>\n                <p>Departure: ${new Date(e.departureDate).toLocaleDateString()}</p>\n                <p>Return: ${new Date(e.returnDate).toLocaleDateString()}</p>\n                <p class="price">${e.price.currency} ${e.price.amount}</p>\n                <button class="book-button" data-destination-code="${e.destination.code}">\n                    View Flights\n                </button>\n            `,n.querySelector(".book-button").addEventListener("click",(()=>{document.getElementById("flight-to").value=e.destination.city,document.getElementById("flight-to-code").value=e.destination.code,this.searchFlights()})),t.appendChild(n)})):t.innerHTML='<div class="error">No destinations found.</div>'}async showLocationDetails(e){var t;const n=document.createElement("div");n.className="location-modal",n.innerHTML='<div class="loading">Loading location details...</div>',document.body.appendChild(n);try{const i=await this.travelAPI.getLocationDetails(e);n.innerHTML=`\n                <div class="location-details">\n                    <button class="close-button">&times;</button>\n                    <h2>${i.name}</h2>\n                    \n                    <div class="location-photos">\n                        ${(null==(t=i.photos)?void 0:t.slice(0,5).map((e=>`\n                            <img src="${e.url}" alt="${e.caption||i.name}">\n                        `)).join(""))||""}\n                    </div>\n\n                    <div class="rating-info">\n                        <span class="stars">${"★".repeat(Math.floor(i.rating))}</span>\n                        <span class="review-count">(${i.numberOfReviews} reviews)</span>\n                        ${i.priceLevel?`<span class="price-level">${"$".repeat(i.priceLevel)}</span>`:""}\n                    </div>\n\n                    <div class="location-description">\n                        ${i.description||"No description available"}\n                    </div>\n\n                    <div class="contact-info">\n                        <p><strong>Address:</strong> ${[i.address.street1,i.address.street2,i.address.city,i.address.state,i.address.country,i.address.postalCode].filter(Boolean).join(", ")}</p>\n                        ${i.phone?`<p><strong>Phone:</strong> ${i.phone}</p>`:""}\n                        ${i.email?`<p><strong>Email:</strong> ${i.email}</p>`:""}\n                        ${i.website?`<p><strong>Website:</strong> <a href="${i.website}" target="_blank">Visit Website</a></p>`:""}\n                    </div>\n\n                    ${i.amenities?`\n                        <div class="amenities">\n                            <h3>Amenities</h3>\n                            <ul>\n                                ${i.amenities.map((e=>`<li>${e}</li>`)).join("")}\n                            </ul>\n                        </div>\n                    `:""}\n\n                    <div class="map-container">\n                        <iframe\n                            width="100%"\n                            height="300"\n                            frameborder="0"\n                            style="border:0"\n                            src="https://www.google.com/maps/embed/v1/place?key=YOUR_GOOGLE_MAPS_API_KEY&q=${i.coordinates.latitude},${i.coordinates.longitude}"\n                            allowfullscreen>\n                        </iframe>\n                    </div>\n\n                    <a href="${i.webUrl}" target="_blank" class="tripadvisor-link">\n                        View on TripAdvisor\n                    </a>\n                </div>\n            `,n.querySelector(".close-button").addEventListener("click",(()=>n.remove())),n.querySelector(".location-photos").insertAdjacentHTML("afterend",`\n                <button class="view-all-photos" data-location-id="${e}">\n                    View All Photos\n                </button>\n            `),n.querySelector(".view-all-photos").addEventListener("click",(e=>{this.showPhotoGallery(e.target.dataset.locationId)}))}catch(i){n.innerHTML=`\n                <div class="error">\n                    <h3>Error Loading Details</h3>\n                    <p>${i.message}</p>\n                    <button class="close-button">Close</button>\n                </div>\n            `,n.querySelector(".close-button").addEventListener("click",(()=>n.remove()))}}async showPhotoGallery(e){const t=document.createElement("div");t.className="photo-gallery-modal",t.innerHTML='<div class="loading">Loading photos...</div>',document.body.appendChild(t);try{const n=await this.travelAPI.getLocationPhotos(e);t.innerHTML=`\n                <div class="photo-gallery">\n                    <button class="close-button">&times;</button>\n                    <div class="gallery-grid">\n                        ${n.map((e=>`\n                            <div class="gallery-item" data-photo-id="${e.id}">\n                                <img src="${e.thumbnailUrl}" \n                                     data-large-url="${e.largeUrl}"\n                                     alt="${e.caption||"Location photo"}"\n                                     loading="lazy">\n                                ${e.caption?`<div class="photo-caption">${e.caption}</div>`:""}\n                            </div>\n                        `)).join("")}\n                    </div>\n                    <div class="photo-viewer">\n                        <button class="prev-photo">&lt;</button>\n                        <div class="current-photo"></div>\n                        <button class="next-photo">&gt;</button>\n                    </div>\n                </div>\n            `,this.setupGalleryInteraction(t,n)}catch(n){t.innerHTML=`\n                <div class="error">\n                    <h3>Error Loading Photos</h3>\n                    <p>${n.message}</p>\n                    <button class="close-button">Close</button>\n                </div>\n            `}t.querySelector(".close-button").addEventListener("click",(()=>t.remove()))}setupGalleryInteraction(e,t){const n=e.querySelectorAll(".gallery-item"),i=e.querySelector(".photo-viewer").querySelector(".current-photo");let a=0;function s(e){const a=t[e];i.innerHTML=`\n                <img src="${a.largeUrl}" alt="${a.caption||"Location photo"}">\n                <div class="photo-info">\n                    <p class="caption">${a.caption||""}</p>\n                    <p class="meta">\n                        <span>By ${a.user}</span>\n                        <span>Uploaded: ${new Date(a.uploadDate).toLocaleDateString()}</span>\n                        <span>👍 ${a.helpfulVotes}</span>\n                    </p>\n                </div>\n            `,n.forEach((e=>e.classList.remove("active"))),n[e].classList.add("active")}t.length>0&&s(0),n.forEach(((e,t)=>{e.addEventListener("click",(()=>{a=t,s(a)}))})),e.querySelector(".prev-photo").addEventListener("click",(()=>{a=(a-1+t.length)%t.length,s(a)})),e.querySelector(".next-photo").addEventListener("click",(()=>{a=(a+1)%t.length,s(a)}))}}document.addEventListener("DOMContentLoaded",(()=>{new t}));
//# sourceMappingURL=itinerary-0e5fd12b.js.map
