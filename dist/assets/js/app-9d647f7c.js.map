{"version":3,"file":"app-9d647f7c.js","sources":["../../../booking-api.js"],"sourcesContent":["class TravelAPI {\r\n    constructor() {\r\n        // Move API keys to environment variables\r\n        this.TRIPADVISOR_API_KEY = import.meta.env.VITE_TRIPADVISOR_API_KEY;\r\n        this.TRIPADVISOR_API_HOST = 'api.content.tripadvisor.com';\r\n        this.AIRPORT_API_KEY = import.meta.env.VITE_RAPIDAPI_KEY;\r\n        this.AIRPORT_API_HOST = 'airport-info.p.rapidapi.com';\r\n    }\r\n\r\n    // City/Location Search\r\n    async getCitySuggestions(searchQuery, options = {}) {\r\n        if (!searchQuery && !options.latLong) {\r\n            throw new Error('Either searchQuery or latLong is required');\r\n        }\r\n\r\n        const url = `https://${this.TRIPADVISOR_API_HOST}/api/v1/location/search`;\r\n        \r\n        // Build query parameters\r\n        const params = new URLSearchParams({\r\n            key: this.TRIPADVISOR_API_KEY,\r\n            language: options.language || 'en'\r\n        });\r\n\r\n        // Add required searchQuery if provided\r\n        if (searchQuery) {\r\n            params.append('searchQuery', searchQuery);\r\n        }\r\n\r\n        // Add optional parameters\r\n        if (options.category) {\r\n            // Validate category\r\n            const validCategories = ['hotels', 'attractions', 'restaurants', 'geos'];\r\n            if (!validCategories.includes(options.category)) {\r\n                throw new Error(`Invalid category. Must be one of: ${validCategories.join(', ')}`);\r\n            }\r\n            params.append('category', options.category);\r\n        }\r\n\r\n        if (options.phone) {\r\n            // Remove '+' from phone number if present\r\n            const cleanPhone = options.phone.replace(/^\\+/, '');\r\n            params.append('phone', cleanPhone);\r\n        }\r\n\r\n        if (options.address) {\r\n            params.append('address', options.address);\r\n        }\r\n\r\n        if (options.latLong) {\r\n            // Validate latLong format\r\n            const latLongRegex = /^-?\\d+(\\.\\d+)?,-?\\d+(\\.\\d+)?$/;\r\n            if (!latLongRegex.test(options.latLong)) {\r\n                throw new Error('Invalid latLong format. Must be \"latitude,longitude\"');\r\n            }\r\n            params.append('latLong', options.latLong);\r\n        }\r\n\r\n        if (options.radius) {\r\n            // Validate radius is positive number\r\n            if (typeof options.radius !== 'number' || options.radius <= 0) {\r\n                throw new Error('Radius must be a positive number');\r\n            }\r\n            params.append('radius', options.radius.toString());\r\n        }\r\n\r\n        if (options.radiusUnit) {\r\n            // Validate radiusUnit\r\n            const validUnits = ['km', 'mi', 'm'];\r\n            if (!validUnits.includes(options.radiusUnit)) {\r\n                throw new Error(`Invalid radiusUnit. Must be one of: ${validUnits.join(', ')}`);\r\n            }\r\n            params.append('radiusUnit', options.radiusUnit);\r\n        }\r\n\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'accept': 'application/json',\r\n                'X-API-KEY': this.TRIPADVISOR_API_KEY\r\n            }\r\n        };\r\n\r\n        try {\r\n            console.log('Location search parameters:', Object.fromEntries(params));\r\n            const result = await this.makeAPIRequest(`${url}?${params}`, requestOptions);\r\n\r\n            if (!result.data) {\r\n                console.log('No locations found');\r\n                return [];\r\n            }\r\n\r\n            return result.data.map(location => ({\r\n                id: location.location_id,\r\n                name: location.name,\r\n                type: location.location_type,\r\n                address: {\r\n                    street: location.address_obj?.street1,\r\n                    city: location.address_obj?.city,\r\n                    state: location.address_obj?.state,\r\n                    country: location.address_obj?.country,\r\n                    postalCode: location.address_obj?.postalcode,\r\n                    addressString: location.address_obj?.address_string\r\n                },\r\n                coordinates: {\r\n                    latitude: location.latitude,\r\n                    longitude: location.longitude\r\n                },\r\n                category: {\r\n                    name: location.category?.name,\r\n                    subcategories: location.subcategory?.map(sub => sub.name) || []\r\n                },\r\n                rating: location.rating,\r\n                numberOfReviews: location.num_reviews,\r\n                rankingPosition: location.ranking_position,\r\n                rankingCategory: location.ranking_category,\r\n                phone: location.phone,\r\n                website: location.website,\r\n                email: location.email,\r\n                priceLevel: location.price_level,\r\n                distance: location.distance,\r\n                bearing: location.bearing\r\n            }));\r\n        } catch (error) {\r\n            console.error('Error in location search:', error);\r\n            throw new Error(`Failed to search locations: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    // Update the searchNearby method\r\n    async searchNearby(latitude, longitude, options = {}) {\r\n        const url = `https://${this.TRIPADVISOR_API_HOST}/api/v1/location/nearby`;\r\n        \r\n        const params = new URLSearchParams({\r\n            key: this.TRIPADVISOR_API_KEY,\r\n            latLong: `${latitude},${longitude}`,\r\n            language: options.language || 'en',\r\n            radius: options.radius?.toString() || '5',\r\n            radiusUnit: options.radiusUnit || 'km',\r\n            category: options.category || 'hotels,restaurants,attractions',\r\n            limit: options.limit?.toString() || '10'\r\n        });\r\n\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'accept': 'application/json',\r\n                'X-API-KEY': this.TRIPADVISOR_API_KEY\r\n            }\r\n        };\r\n\r\n        try {\r\n            console.log('Searching nearby locations:', { latitude, longitude, ...options });\r\n            const result = await this.makeAPIRequest(`${url}?${params}`, requestOptions);\r\n\r\n            if (!result.data) {\r\n                console.log('No nearby locations found');\r\n                return [];\r\n            }\r\n\r\n            return result.data.map(location => ({\r\n                id: location.location_id,\r\n                name: location.name,\r\n                type: location.location_type,\r\n                distance: location.distance,\r\n                bearing: location.bearing,\r\n                address: {\r\n                    street: location.address_obj?.street1,\r\n                    city: location.address_obj?.city,\r\n                    state: location.address_obj?.state,\r\n                    country: location.address_obj?.country,\r\n                    postalCode: location.address_obj?.postalcode\r\n                },\r\n                coordinates: {\r\n                    latitude: location.latitude,\r\n                    longitude: location.longitude\r\n                },\r\n                rating: location.rating,\r\n                numberOfReviews: location.num_reviews,\r\n                category: {\r\n                    name: location.category?.name,\r\n                    subcategories: location.subcategory?.map(sub => sub.name) || []\r\n                },\r\n                priceLevel: location.price_level,\r\n                phone: location.phone,\r\n                website: location.website,\r\n                openNow: location.open_now_text\r\n            }));\r\n        } catch (error) {\r\n            console.error('Error searching nearby locations:', error);\r\n            throw new Error(`Failed to search nearby locations: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    // Add method to search by category\r\n    async searchByCategory(query, category, options = {}) {\r\n        return this.getCitySuggestions(query, {\r\n            ...options,\r\n            category: category // 'hotels', 'attractions', 'restaurants', or 'geos'\r\n        });\r\n    }\r\n\r\n    // Hotel Search\r\n    async searchHotels(cityName, rating = '') {\r\n        try {\r\n            console.log('Hotel Search Parameters:', { cityName, rating });\r\n            \r\n            // First get the location ID\r\n            const locationData = await this.getCitySuggestions(cityName);\r\n            const locationId = locationData[0]?.id;\r\n            \r\n            if (!locationId) {\r\n                throw new Error(`Location not found for city: ${cityName}`);\r\n            }\r\n\r\n            const url = `https://${this.TRIPADVISOR_API_HOST}/api/v1/location/${locationId}/hotels`;\r\n            const options = {\r\n                method: 'GET',\r\n                headers: {\r\n                    'accept': 'application/json',\r\n                    'X-API-KEY': this.TRIPADVISOR_API_KEY\r\n                }\r\n            };\r\n\r\n            const result = await this.makeAPIRequest(url, options);\r\n            return this.formatHotelResults(result, rating);\r\n        } catch (error) {\r\n            console.error('Detailed Hotel Search Error:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    // Hotel Reviews\r\n    async getLocationReviews(locationId, options = {}) {\r\n        if (!locationId) {\r\n            throw new Error('Location ID is required');\r\n        }\r\n\r\n        const url = `https://${this.TRIPADVISOR_API_HOST}/api/v1/location/${locationId}/reviews`;\r\n        \r\n        // Build query parameters\r\n        const params = new URLSearchParams({\r\n            key: this.TRIPADVISOR_API_KEY,\r\n            language: options.language || 'en',\r\n            limit: options.limit?.toString() || '10',\r\n            offset: options.offset?.toString() || '0'\r\n        });\r\n\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'accept': 'application/json',\r\n                'X-API-KEY': this.TRIPADVISOR_API_KEY\r\n            }\r\n        };\r\n\r\n        try {\r\n            console.log(`Fetching reviews for location ${locationId}`, {\r\n                language: options.language,\r\n                limit: options.limit,\r\n                offset: options.offset\r\n            });\r\n\r\n            const result = await this.makeAPIRequest(`${url}?${params}`, requestOptions);\r\n\r\n            if (!result.data) {\r\n                console.log('No reviews found');\r\n                return [];\r\n            }\r\n\r\n            return this.formatLocationReviews(result);\r\n        } catch (error) {\r\n            console.error('Error fetching location reviews:', error);\r\n            throw new Error(`Failed to fetch location reviews: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    // Add helper method for paginated reviews\r\n    async getLocationReviewsPaginated(locationId, page = 1, pageSize = 10, language = 'en') {\r\n        return this.getLocationReviews(locationId, {\r\n            language,\r\n            limit: pageSize,\r\n            offset: (page - 1) * pageSize\r\n        });\r\n    }\r\n\r\n    // Hotel Photos\r\n    async getLocationPhotos(locationId, options = {}) {\r\n        if (!locationId) {\r\n            throw new Error('Location ID is required');\r\n        }\r\n\r\n        const url = `https://${this.TRIPADVISOR_API_HOST}/api/v1/location/${locationId}/photos`;\r\n        \r\n        // Build query parameters\r\n        const params = new URLSearchParams({\r\n            key: this.TRIPADVISOR_API_KEY,\r\n            language: options.language || 'en',\r\n            limit: options.limit?.toString() || '10',\r\n            offset: options.offset?.toString() || '0'\r\n        });\r\n\r\n        // Add source parameter if specified\r\n        if (options.source) {\r\n            // Validate source values\r\n            const validSources = ['Expert', 'Management', 'Traveler'];\r\n            const sources = options.source.split(',').map(s => s.trim());\r\n            const invalidSources = sources.filter(s => !validSources.includes(s));\r\n            \r\n            if (invalidSources.length > 0) {\r\n                throw new Error(`Invalid photo sources: ${invalidSources.join(', ')}`);\r\n            }\r\n            \r\n            params.append('source', options.source);\r\n        }\r\n\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'accept': 'application/json',\r\n                'X-API-KEY': this.TRIPADVISOR_API_KEY\r\n            }\r\n        };\r\n\r\n        try {\r\n            console.log(`Fetching photos for location ${locationId}`, {\r\n                limit: options.limit,\r\n                offset: options.offset,\r\n                source: options.source\r\n            });\r\n\r\n            const result = await this.makeAPIRequest(`${url}?${params}`, requestOptions);\r\n\r\n            if (!result.data) {\r\n                console.log('No photos found');\r\n                return [];\r\n            }\r\n\r\n            return result.data.map(photo => ({\r\n                id: photo.id,\r\n                caption: photo.caption,\r\n                source: {\r\n                    type: photo.source?.type || 'Unknown',\r\n                    name: photo.source?.name,\r\n                    url: photo.source?.url\r\n                },\r\n                images: {\r\n                    thumbnail: photo.images.thumbnail.url,\r\n                    small: photo.images.small.url,\r\n                    medium: photo.images.medium.url,\r\n                    large: photo.images.large.url,\r\n                    original: photo.images.original.url\r\n                },\r\n                uploadDate: photo.uploaded_date,\r\n                user: {\r\n                    username: photo.user?.username || 'Anonymous',\r\n                    userUrl: photo.user?.url,\r\n                    avatar: photo.user?.avatar?.small?.url\r\n                },\r\n                helpfulVotes: photo.helpful_votes || 0,\r\n                categories: photo.categories || [],\r\n                tags: photo.tags || []\r\n            }));\r\n        } catch (error) {\r\n            console.error('Error fetching location photos:', error);\r\n            throw new Error(`Failed to fetch location photos: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    // Add a method to fetch photos by source\r\n    async getLocationPhotosBySource(locationId, source, limit = 10) {\r\n        return this.getLocationPhotos(locationId, {\r\n            source,\r\n            limit\r\n        });\r\n    }\r\n\r\n    // Add a method to fetch photos with pagination\r\n    async getLocationPhotosPaginated(locationId, page = 1, pageSize = 10) {\r\n        return this.getLocationPhotos(locationId, {\r\n            limit: pageSize,\r\n            offset: (page - 1) * pageSize\r\n        });\r\n    }\r\n\r\n    // Location Details\r\n    async getLocationDetails(locationId, options = {}) {\r\n        if (!locationId) {\r\n            throw new Error('Location ID is required');\r\n        }\r\n\r\n        const url = `https://${this.TRIPADVISOR_API_HOST}/api/v1/location/${locationId}/details`;\r\n        \r\n        // Build query parameters\r\n        const params = new URLSearchParams({\r\n            key: this.TRIPADVISOR_API_KEY,\r\n            language: options.language || 'en',\r\n            currency: options.currency || 'USD'\r\n        });\r\n\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'accept': 'application/json',\r\n                'X-API-KEY': this.TRIPADVISOR_API_KEY\r\n            }\r\n        };\r\n\r\n        try {\r\n            console.log(`Fetching details for location ${locationId}`);\r\n            const result = await this.makeAPIRequest(`${url}?${params}`, requestOptions);\r\n\r\n            if (!result) {\r\n                throw new Error('No location details found');\r\n            }\r\n\r\n            return this.formatLocationDetails(result);\r\n        } catch (error) {\r\n            console.error('Error fetching location details:', error);\r\n            throw new Error(`Failed to fetch location details: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    // Helper Methods\r\n    formatHotelResults(apiResponse, minRating = '') {\r\n        if (!apiResponse.data) {\r\n            return [];\r\n        }\r\n\r\n        let hotels = apiResponse.data.map(hotel => ({\r\n            id: hotel.location_id,\r\n            name: hotel.name,\r\n            rating: hotel.rating,\r\n            price: {\r\n                amount: hotel.price_level || '$$',\r\n                currency: 'USD'\r\n            },\r\n            address: hotel.address_obj ? `${hotel.address_obj.street1}, ${hotel.address_obj.city}` : '',\r\n            amenities: hotel.amenities || [],\r\n            images: hotel.photo ? [hotel.photo.images.large.url] : [],\r\n            reviews: {\r\n                count: hotel.num_reviews || 0,\r\n                score: hotel.rating || 0\r\n            }\r\n        }));\r\n\r\n        if (minRating) {\r\n            hotels = hotels.filter(hotel => hotel.rating >= parseInt(minRating));\r\n        }\r\n\r\n        return hotels;\r\n    }\r\n\r\n    formatLocationReviews(apiResponse) {\r\n        if (!apiResponse || !apiResponse.data) {\r\n            return [];\r\n        }\r\n\r\n        return apiResponse.data.map(review => ({\r\n            id: review.review_id,\r\n            title: review.title,\r\n            text: review.text,\r\n            rating: review.rating,\r\n            subRatings: review.subratings || {},\r\n            publishedDate: review.published_date,\r\n            tripType: review.trip_type,\r\n            travelDate: review.travel_date,\r\n            language: review.language,\r\n            user: {\r\n                username: review.user?.username || 'Anonymous',\r\n                userLocation: review.user?.user_location || '',\r\n                contributions: review.user?.contributions || 0,\r\n                memberLevel: review.user?.level || null,\r\n                memberSince: review.user?.created_time || null\r\n            },\r\n            helpful: {\r\n                votes: review.helpful_votes || 0,\r\n                thanked: review.thank_count || 0\r\n            },\r\n            photos: review.photos?.map(photo => ({\r\n                id: photo.id,\r\n                url: photo.images.large.url,\r\n                thumbnailUrl: photo.images.thumbnail.url,\r\n                caption: photo.caption,\r\n                uploadDate: photo.uploaded_date\r\n            })) || [],\r\n            roomTip: review.room_tip || '',\r\n            tripOrigin: review.trip_origin || '',\r\n            visitDate: review.visit_date || '',\r\n            managementResponse: review.management_response ? {\r\n                text: review.management_response.text,\r\n                date: review.management_response.published_date,\r\n                username: review.management_response.username,\r\n                title: review.management_response.title || ''\r\n            } : null,\r\n            ratings: {\r\n                overall: review.rating,\r\n                sleep: review.subratings?.sleep_quality,\r\n                location: review.subratings?.location,\r\n                rooms: review.subratings?.rooms,\r\n                service: review.subratings?.service,\r\n                value: review.subratings?.value,\r\n                cleanliness: review.subratings?.cleanliness\r\n            }\r\n        }));\r\n    }\r\n\r\n    formatLocationDetails(apiResponse) {\r\n        if (!apiResponse) {\r\n            throw new Error('No location details found');\r\n        }\r\n\r\n        return {\r\n            id: apiResponse.location_id,\r\n            name: apiResponse.name,\r\n            description: apiResponse.description,\r\n            webUrl: apiResponse.web_url,\r\n            address: {\r\n                street1: apiResponse.address_obj?.street1,\r\n                street2: apiResponse.address_obj?.street2,\r\n                city: apiResponse.address_obj?.city,\r\n                state: apiResponse.address_obj?.state,\r\n                country: apiResponse.address_obj?.country,\r\n                postalCode: apiResponse.address_obj?.postalcode,\r\n                addressString: apiResponse.address_obj?.address_string\r\n            },\r\n            coordinates: {\r\n                latitude: apiResponse.latitude,\r\n                longitude: apiResponse.longitude\r\n            },\r\n            rating: apiResponse.rating,\r\n            numberOfReviews: apiResponse.num_reviews,\r\n            rankingData: {\r\n                geoLocation: apiResponse.ranking_geo,\r\n                ranking: apiResponse.ranking,\r\n                category: apiResponse.ranking_category\r\n            },\r\n            photos: apiResponse.photos?.map(photo => ({\r\n                id: photo.id,\r\n                caption: photo.caption,\r\n                url: photo.images.large.url,\r\n                thumbnailUrl: photo.images.small.url,\r\n                uploadDate: photo.uploaded_date,\r\n                source: {\r\n                    name: photo.source?.name,\r\n                    url: photo.source?.url\r\n                }\r\n            })) || [],\r\n            amenities: apiResponse.amenities || [],\r\n            priceLevel: apiResponse.price_level,\r\n            price: apiResponse.price,\r\n            phone: apiResponse.phone,\r\n            email: apiResponse.email,\r\n            website: apiResponse.website,\r\n            hours: {\r\n                openNow: apiResponse.open_now_text,\r\n                weekRanges: apiResponse.hours?.week_ranges,\r\n                timeZone: apiResponse.timezone\r\n            },\r\n            category: {\r\n                name: apiResponse.category?.name,\r\n                subcategories: apiResponse.subcategory?.map(sub => sub.name) || []\r\n            }\r\n        };\r\n    }\r\n\r\n    async makeAPIRequest(url, options, retries = 3) {\r\n        let lastError;\r\n\r\n        for (let i = 0; i < retries; i++) {\r\n            try {\r\n                const response = await fetch(url, options);\r\n                if (!response.ok) {\r\n                    const errorText = await response.text();\r\n                    throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);\r\n                }\r\n                return await response.json();\r\n            } catch (error) {\r\n                console.log(`Attempt ${i + 1} failed:`, error);\r\n                lastError = error;\r\n                // Wait before retrying (exponential backoff)\r\n                await new Promise(resolve => setTimeout(resolve, Math.pow(2, i) * 1000));\r\n            }\r\n        }\r\n        throw lastError;\r\n    }\r\n\r\n    // Add a method to format distance display\r\n    formatDistance(distance, unit = 'km') {\r\n        if (unit === 'mi') {\r\n            return `${(distance * 0.621371).toFixed(1)} miles`;\r\n        }\r\n        return `${distance.toFixed(1)} km`;\r\n    }\r\n\r\n    // Update formatLocationForDisplay to include distance\r\n    formatLocationForDisplay(location) {\r\n        const parts = [];\r\n        \r\n        // Name and type\r\n        parts.push(location.name);\r\n        if (location.type) {\r\n            parts.push(`(${location.type})`);\r\n        }\r\n\r\n        // Distance if available\r\n        if (location.distance) {\r\n            parts.push(this.formatDistance(location.distance));\r\n        }\r\n\r\n        // Category\r\n        if (location.category?.name) {\r\n            const categoryPart = [location.category.name];\r\n            if (location.category.subcategories?.length > 0) {\r\n                categoryPart.push(location.category.subcategories.join(', '));\r\n            }\r\n            parts.push(categoryPart.join(' - '));\r\n        }\r\n\r\n        // Address\r\n        const address = [];\r\n        if (location.address.street) address.push(location.address.street);\r\n        if (location.address.city) address.push(location.address.city);\r\n        if (location.address.state) address.push(location.address.state);\r\n        if (location.address.country) address.push(location.address.country);\r\n        \r\n        if (address.length > 0) {\r\n            parts.push(address.join(', '));\r\n        }\r\n\r\n        // Rating and reviews\r\n        if (location.rating) {\r\n            parts.push(`${location.rating}★ (${location.numberOfReviews} reviews)`);\r\n        }\r\n\r\n        // Opening hours if available\r\n        if (location.openNow) {\r\n            parts.push(location.openNow);\r\n        }\r\n\r\n        return parts.join(' | ');\r\n    }\r\n\r\n    // Add this new method for airport search\r\n    async searchAirports(query) {\r\n        const url = `https://${this.AIRPORT_API_HOST}/airport`;\r\n        \r\n        const params = new URLSearchParams({\r\n            iata: query.toUpperCase()\r\n        });\r\n\r\n        const options = {\r\n            method: 'GET',\r\n            headers: {\r\n                'x-rapidapi-key': this.AIRPORT_API_KEY,\r\n                'x-rapidapi-host': this.AIRPORT_API_HOST\r\n            }\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(`${url}?${params}`, options);\r\n            if (!response.ok) {\r\n                throw new Error('Airport search failed');\r\n            }\r\n            const data = await response.json();\r\n            \r\n            return this.formatAirportData(data);\r\n        } catch (error) {\r\n            console.error('Error searching airports:', error);\r\n            throw new Error('Failed to search airports');\r\n        }\r\n    }\r\n\r\n    // Format airport data\r\n    formatAirportData(data) {\r\n        if (!data) return null;\r\n\r\n        return {\r\n            id: data.iata,\r\n            name: data.name,\r\n            location: {\r\n                city: data.city,\r\n                state: data.state,\r\n                country: data.country,\r\n                latitude: data.latitude,\r\n                longitude: data.longitude\r\n            },\r\n            code: data.iata,\r\n            timezone: data.timezone,\r\n            type: data.type,\r\n            website: data.website,\r\n            phone: data.phone\r\n        };\r\n    }\r\n\r\n    async getLocationSearch(options = {}) {\r\n        try {\r\n            // Use proxy path instead of direct API URL\r\n            const url = '/api/v1/location/search';\r\n            const params = new URLSearchParams({\r\n                key: this.TRIPADVISOR_API_KEY,\r\n                searchQuery: options.searchQuery || '',\r\n                category: options.category || 'attractions',\r\n                language: options.language || 'en',\r\n                limit: options.limit || 4\r\n            });\r\n\r\n            const response = await this.makeRequest(`${url}?${params}`);\r\n            return response.data || [];\r\n        } catch (error) {\r\n            console.error('Location search failed:', error);\r\n            return [];\r\n        }\r\n    }\r\n\r\n    async getLocationDetails(locationId) {\r\n        try {\r\n            const url = `/api/v1/location/${locationId}/details`;\r\n            const params = new URLSearchParams({\r\n                key: this.TRIPADVISOR_API_KEY\r\n            });\r\n\r\n            const response = await this.makeRequest(`${url}?${params}`);\r\n            return response.data || null;\r\n        } catch (error) {\r\n            console.error('Error getting location details:', error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    async getLocationPhotos(locationId, options = {}) {\r\n        try {\r\n            const url = `/api/v1/location/${locationId}/photos`;\r\n            const params = new URLSearchParams({\r\n                key: this.TRIPADVISOR_API_KEY,\r\n                limit: options.limit || 1\r\n            });\r\n\r\n            const response = await this.makeRequest(`${url}?${params}`);\r\n            return response.data || [];\r\n        } catch (error) {\r\n            console.error('Error getting location photos:', error);\r\n            return [];\r\n        }\r\n    }\r\n\r\n    // Helper method for making API requests\r\n    async makeRequest(url, options = {}) {\r\n        const defaultOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'X-TripAdvisor-API-Key': this.TRIPADVISOR_API_KEY,\r\n                'User-Agent': 'TravelBuddy/1.0'\r\n            }\r\n        };\r\n\r\n        const finalOptions = {\r\n            ...defaultOptions,\r\n            ...options,\r\n            headers: {\r\n                ...defaultOptions.headers,\r\n                ...options.headers\r\n            }\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(url, finalOptions);\r\n            \r\n            if (!response.ok) {\r\n                const errorText = await response.text();\r\n                console.error('API Response:', errorText);\r\n                if (response.status === 401) {\r\n                    throw new Error('API Authentication failed. Please check your API key.');\r\n                }\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            return await response.json();\r\n        } catch (error) {\r\n            console.error('API request failed:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async getTopAttractions(limit = 4) {\r\n        try {\r\n            // For testing, let's use mock data until we get API access\r\n            return [\r\n                {\r\n                    id: '1',\r\n                    name: 'Eiffel Tower',\r\n                    location: {\r\n                        city: 'Paris',\r\n                        country: 'France'\r\n                    },\r\n                    rating: 4.8,\r\n                    reviews: 140000,\r\n                    image: 'assets/images/eiffel-tower.jpg',\r\n                    description: 'Iconic iron lattice tower on the Champ de Mars'\r\n                },\r\n                {\r\n                    id: '2',\r\n                    name: 'Colosseum',\r\n                    location: {\r\n                        city: 'Rome',\r\n                        country: 'Italy'\r\n                    },\r\n                    rating: 4.7,\r\n                    reviews: 130000,\r\n                    image: 'assets/images/colosseum.jpg',\r\n                    description: 'Ancient amphitheater in the heart of Rome'\r\n                },\r\n                {\r\n                    id: '3',\r\n                    name: 'Taj Mahal',\r\n                    location: {\r\n                        city: 'Agra',\r\n                        country: 'India'\r\n                    },\r\n                    rating: 4.9,\r\n                    reviews: 120000,\r\n                    image: 'assets/images/taj-mahal.jpg',\r\n                    description: 'Stunning marble mausoleum and UNESCO World Heritage site'\r\n                },\r\n                {\r\n                    id: '4',\r\n                    name: 'Machu Picchu',\r\n                    location: {\r\n                        city: 'Cusco Region',\r\n                        country: 'Peru'\r\n                    },\r\n                    rating: 4.9,\r\n                    reviews: 100000,\r\n                    image: 'assets/images/machu-picchu.jpg',\r\n                    description: 'Ancient Incan city set high in the Andes Mountains'\r\n                }\r\n            ];\r\n        } catch (error) {\r\n            console.error('Error fetching top attractions:', error);\r\n            return [];\r\n        }\r\n    }\r\n}\r\n\r\nexport default TravelAPI; "],"names":["TravelAPI","constructor","this","TRIPADVISOR_API_KEY","TRIPADVISOR_API_HOST","AIRPORT_API_KEY","AIRPORT_API_HOST","getCitySuggestions","searchQuery","options","latLong","Error","url","params","URLSearchParams","key","language","append","category","validCategories","includes","join","phone","cleanPhone","replace","address","test","radius","toString","radiusUnit","validUnits","requestOptions","method","headers","accept","result","makeAPIRequest","data","map","location","_a","_b","_c","_d","_e","_f","_g","_h","id","location_id","name","type","location_type","street","address_obj","street1","city","state","country","postalCode","postalcode","addressString","address_string","coordinates","latitude","longitude","subcategories","subcategory","sub","rating","numberOfReviews","num_reviews","rankingPosition","ranking_position","rankingCategory","ranking_category","website","email","priceLevel","price_level","distance","bearing","error","message","searchNearby","limit","openNow","open_now_text","searchByCategory","query","searchHotels","cityName","locationId","formatHotelResults","getLocationReviews","offset","formatLocationReviews","getLocationReviewsPaginated","page","pageSize","getLocationPhotos","source","validSources","invalidSources","split","s","trim","filter","length","photo","caption","images","thumbnail","small","medium","large","original","uploadDate","uploaded_date","user","username","userUrl","avatar","helpfulVotes","helpful_votes","categories","tags","getLocationPhotosBySource","getLocationPhotosPaginated","getLocationDetails","currency","formatLocationDetails","apiResponse","minRating","hotels","hotel","price","amount","amenities","reviews","count","score","parseInt","review","_i","_j","_k","_l","review_id","title","text","subRatings","subratings","publishedDate","published_date","tripType","trip_type","travelDate","travel_date","userLocation","user_location","contributions","memberLevel","level","memberSince","created_time","helpful","votes","thanked","thank_count","photos","thumbnailUrl","roomTip","room_tip","tripOrigin","trip_origin","visitDate","visit_date","managementResponse","management_response","date","ratings","overall","sleep","sleep_quality","rooms","service","value","cleanliness","description","webUrl","web_url","street2","rankingData","geoLocation","ranking_geo","ranking","hours","weekRanges","week_ranges","timeZone","timezone","retries","lastError","i","response","fetch","ok","errorText","status","json","Promise","resolve","setTimeout","Math","pow","formatDistance","unit","toFixed","formatLocationForDisplay","parts","push","categoryPart","searchAirports","iata","toUpperCase","formatAirportData","code","getLocationSearch","makeRequest","defaultOptions","Accept","finalOptions","getTopAttractions","image"],"mappings":"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"}